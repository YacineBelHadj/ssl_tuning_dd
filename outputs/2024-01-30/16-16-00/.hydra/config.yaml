task_name: debug
HYDRA_FULL_ERROR: 1
tags:
- dev
train: true
test: true
save_state_dict: true
ckpt_path: null
seed: 42
name: test-0.1.0
transform:
  transform_psd:
    _target_: src.data.psm.transform.create_psd_transformer
    database_path: ${oc.env:path_data}
    freq_min: 0
    freq_max: 150
    num_classes: 20
  transform_label:
    _target_: src.data.psm.transform.create_label_transformer
    database_path: ${oc.env:path_data}
    freq_min: 0
    freq_max: 150
    num_classes: 20
  dim_psd:
    _target_: src.data.psm.transform.dimension_psd
    database_path: ${oc.env:path_data}
    freq_min: 0
    freq_max: 150
    num_classes: 20
    _convert_: object
  dim_psd_val: ${.dim_psd}
dataset:
  train_val:
    _target_: src.data.psm.dataset.build_dataset
    database_path: ${oc.env:PATH_DATA}
    table_name: processed_data
    columns:
    - PSD
    - id
    preload: true
    condition: stage =?
    parameters:
    - train
    transform: ${transform.transform_psd}
    transform_label: ${transform.transform_label}
    _recursive_: true
  test:
    _target_: src.data.psm.dataset.build_dataset
    database_path: ${oc.env:PATH_DATA}
    table_name: processed_data
    columns:
    - PSD
    - id
    transform: ${transform.transform_psd}
    transform_label: ${transform.transform_label}
    preload: true
    condition: stage =?
    parameters:
    - test
  affected_real_anomaly:
    _target_: src.data.psm.dataset.build_dataset
    database_path: ${oc.env:PATH_DATA}
    table_name: processed_data
    columns:
    - PSD
    - id
    transform: ${transform.transform_psd}
    transform_label: ${transform.transform_label}
    preload: true
    condition: stage =?
    parameters:
    - anomaly
  reference:
    _target_: src.data.psm.dataset.build_dataset
    database_path: ${oc.env:PATH_DATA_V}
    table_name: ORIGINAL_PSD
    columns:
    - PSD
    - id
    transform: ${transform.transform_psd}
    transform_label: ${transform.transform_label}
    preload: true
  affected_virtual_anomaly:
    _target_: src.data.psm.dataset.build_dataset
    database_path: ${oc.env:PATH_DATA_V}
    table_name: VAS_notch
    columns:
    - PSD
    - id
    transform: ${transform.transform_psd}
    transform_label: ${transform.transform_label}
    preload: false
datamodule:
  _target_: src.data.psm.datamodule.DataModule
  train_val:
    dataset: ${dataset.train_val}
    dataloader:
      tr_val_split: 0.8
      batch_size: 64
      shuffle: true
      num_workers: 4
      pin_memory: true
      drop_last: true
  test:
    dataset: ${dataset.test}
    dataloader:
      batch_size: 64
      shuffle: false
      num_workers: 4
      pin_memory: true
      drop_last: false
  affected_real_anomaly:
    dataset: ${dataset.affected_real_anomaly}
    dataloader:
      batch_size: 1000
      shuffle: false
      num_workers: 4
      pin_memory: true
      drop_last: false
  reference:
    dataset: ${dataset.reference}
    dataloader:
      batch_size: 1000
      shuffle: false
      num_workers: 4
      pin_memory: true
      drop_last: false
  affected_virtual_anomaly:
    dataset: ${dataset.affected_virtual_anomaly}
    dataloader:
      batch_size: 4000
      shuffle: false
      num_workers: 4
      pin_memory: true
      drop_last: false
backbone:
  _target_: src.modules.classifier.ClassifierModule
  logging:
    on_step: false
    on_epoch: true
    sync_dist: true
    prog_bar: true
  network:
    __target__: src.modules.models.SimpleDenseNet
    input_dim: ${tranform.dim_psd}
    hidden_layers:
    - 64
    - 128
    - 64
    embedding_dim: 32
    output_size: 4
    dropout: 0.5
    activation: ReLU
    batch_norm: true
    bias: true
    temperature: 1
    lambda_: 0.0001
    optimizer:
      _target_: torch.optim.Adam
      lr: 0.001
      weight_decay: 0.0001
    scheduler:
      _target_: torch.optim.lr_scheduler.CosineAnnealingLR
      T_max: 10
      eta_min: 1.0e-10
    losses:
      learning_loss:
        _target_: torch.nn.CrossEntropyLoss
        weight: 1
      regularizer_loss:
        _target_: ssl_dd.modules.losses.RegularizerLoss
        weight: ${model.lambda_}
    metrics:
      _target_: torchmetrics.Accuracy
      task: multiclass
      num_classes: 20
